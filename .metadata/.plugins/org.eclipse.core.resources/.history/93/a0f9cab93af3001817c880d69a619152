import java.util.Scanner;
import java.util.Arrays;
import java.text.DecimalFormat;
							  
public class DechargeTest {
	private static DecimalFormat df = new DecimalFormat("#.000");
	
       /*******************************************
         * Completez le programme a partir d'ici.
         *******************************************/
	public static double calculerDistance(int x1, int y1, int x2 , int y2) {
		
		return Math.sqrt(Math.pow((x1 - x2), 2)+Math.pow((y1-y2), 2));
	}
	public static int plusProche (int x, int y, int[] coordonneesHabitations) {
		double tmp = 1000.0;
		int index=0;
		for (int i=0 ; i < coordonneesHabitations.length; i+=2) {
			double compareDistance = calculerDistance(x, y, coordonneesHabitations[i],coordonneesHabitations[i+1]);
			
			if (compareDistance < tmp) { 
				tmp = compareDistance;
				index=i;
			}
		}
		return index;
	}
	
	public static int[] troisPlusProches(int x, int y, int[] coordonneesHabitations) {
		
		int index=0;
		int[] tabProche = new int [6];
		int[] tabTemp = new int[coordonneesHabitations.length];
		for (int i = 0 ; i < coordonneesHabitations.length ; i++) {
			tabTemp[i]= coordonneesHabitations[i];
		}
	
		for ( int j = 0 ; j < 6 ; j+=2 ) {
			index = plusProche(x, y, tabTemp);
			tabProche[j] = tabTemp[index];
			tabProche[j+1] = tabTemp[index+1];
			tabTemp[index]=1000;
			tabTemp[index+1]=1000;
	}
				
		return tabProche;
	}
		
		
	
	public static int[] meilleurePlace( int x, int y , int[] coordonneesHabitations) {
		// centre de gravite donné par les 3 habitations les plus proche
		//cx = (x1 + x2 + x3) / 3
		//cy = (y1 + y2 + y3) / 3
		int[] tabDecharge = new int[2];
		if (coordonneesHabitations.length == 6 ) { 
			tabDecharge[0]= (coordonneesHabitations[0] + coordonneesHabitations[2] + coordonneesHabitations[4] ) / 3 ;
			tabDecharge[1]= (coordonneesHabitations[1] + coordonneesHabitations[3] + coordonneesHabitations[5] ) / 3 ;
			return tabDecharge;
		} else {
		int[] tabTroisProches = troisPlusProches(x, y, coordonneesHabitations);
		
		int cx = ( tabTroisProches[0] + tabTroisProches[2] + tabTroisProches[4] ) / 3 ;
		int cy = ( tabTroisProches[1] + tabTroisProches[3] + tabTroisProches[5] ) / 3 ;
		tabDecharge[0]= cx;
		tabDecharge[1]= cy;
		return tabDecharge;
		}
	}
        /*******************************************
         * Ne rien modifier apres cette ligne.
         *******************************************/

	public static void afficheTroisPlusProches(int x, int y, int[] coordonneesHabitations) {
		int[] tpp = troisPlusProches(x, y, coordonneesHabitations);
		
		System.out.println("(" + x + "," + y + ") est a :");
		for (int i = 0 ; i < 3 ; i++) {
			System.out.println("    " + df.format(calculerDistance(x, y, tpp[2*i], tpp[2*i+1])) + " de (" + tpp[2*i] + "," + tpp[2*i+1] + ")"); 
		}
	}

	

	//PROGRAMME PRINCIPAL
	public static void main(String args[]) {
		
		int[] coordonneesHabitations = {
				50, 47, 39, 30, 50, 25, 58, 0, 88, 53
		};
		
		// Lecture des donnees
		Scanner clavier = new Scanner(System.in);
		System.out.print("Entrez la coordonnee x de la decharge: ");
		int x = clavier.nextInt();
		System.out.print("Entrez le coordonnee y de la decharge: ");
		int y = clavier.nextInt();
		
		// trouve les coordonnees de l'habitation la plus proche
		// (identifiees par l'indice correspondant dans le tableau
		// de coordonnees)
		int plusProche = plusProche(x, y, coordonneesHabitations);
		System.out.println("--- Question 1 ---");
		System.out.println("Coordonnees de l'habitation la plus proche de la decharge :");
		System.out.println("(" + coordonneesHabitations[plusProche ] + "," + coordonneesHabitations[plusProche  + 1] + ") ; distance = " +
						   df.format(calculerDistance(x, y, coordonneesHabitations[plusProche ], coordonneesHabitations[plusProche  + 1]))  + " metres");	
			
		// trouve les coordonnees des 3 habitations les plus proches et affiche les coordonnees
		
		System.out.println("--- Question 2 ---");
		System.out.println("Coordonnees des 3 habitations les plus proches de la decharge :");
		afficheTroisPlusProches(x, y, coordonneesHabitations);
		
		// affiche le centre de gravite des 3 plus proches (la meilleure place)
		int[] grav = meilleurePlace(x, y, coordonneesHabitations);
		System.out.println("--- Question 3 ---");
		System.out.println("Coordonnees de la meilleure place pour la decharge :");
		System.out.println("(" + grav[0] + "," + grav[1] + ")");
		clavier.close();
	}

}
	